# .github/workflows/wazuh-remote-swarm.yml
name: Wazuh Swarm (remote SSH, multi-node & custom stack file)

on:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - ".github/workflows/**"
  #     - "stack/**"
  #     - "selenium-tests/**"          # where your stack-wazuh.yml lives in THIS repo
  workflow_dispatch:
    
env:
  WAZUH_TAG: v4.12.0
  STACK_SRC: stack/stack-wazuh.yml
  REMOTE_BASE: /home/ec2-user/wazuh
  SWARM_HOST: 3.92.21.45
  SWARM_USER: ec2-user
jobs:
  deploy:
    # If you have a custom CodeBuild runner label, swap this:
    runs-on: codebuild-wazuh-runner-${{ github.run_id }}-${{ github.run_attempt }}
    # runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Write private key
        shell: bash
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf '%s\n' "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Trust server host key (pin it)
        shell: bash
        run: |
          mkdir -p ~/.ssh
          if [ -n "${{ secrets.KNOWN_HOSTS }}" ]; then
            printf '%s\n' "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          else
            ssh-keyscan -H "${{ env.SWARM_HOST }}" >> ~/.ssh/known_hosts
          fi
          chmod 600 ~/.ssh/known_hosts

      - name: Verify SSH
        shell: bash
        run: |
          set -euo pipefail
          OUT="$(ssh -i ~/.ssh/id_rsa -o BatchMode=yes -o UserKnownHostsFile=~/.ssh/known_hosts -T ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} 'echo SSH_OK && whoami && hostname')"
          echo "$OUT"
          echo "$OUT" | grep -qx 'SSH_OK'

      # --- Pull upstream multi-node and ship it ---

      - name: Fetch official Wazuh multi-node at tag
        shell: bash
        run: |
          set -euo pipefail
          rm -rf /tmp/wazuh-docker
          git clone --depth 1 --branch "${{ env.WAZUH_TAG }}" https://github.com/wazuh/wazuh-docker /tmp/wazuh-docker
          tar czf /tmp/wazuh-multi-node.tgz -C /tmp/wazuh-docker multi-node

      - name: Upload multi-node bundle to remote
        shell: bash
        run: |
          set -euo pipefail
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} "mkdir -p '${{ env.REMOTE_BASE }}'"
          scp -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            /tmp/wazuh-multi-node.tgz \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }}:${{ env.REMOTE_BASE }}/

      # --- Put YOUR stack-wazuh.yml inside multi-node/ (no edits) ---

      - name: Upload your stack file into multi-node/
        shell: bash
        run: |
          set -euo pipefail
          test -f "${{ env.STACK_SRC }}" || { echo "Missing ${{ env.STACK_SRC }}"; exit 1; }
          # Ensure base exists and multi-node is unpacked before copying
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} \
            "set -euo pipefail; cd '${{ env.REMOTE_BASE }}'; sudo rm -rf multi-node; tar xzf wazuh-multi-node.tgz"
          scp -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "${{ env.STACK_SRC }}" \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }}:${{ env.REMOTE_BASE }}/multi-node/stack-wazuh.yml

      # --- Separate SSH blocks for the rest ---

      - name: SSH 1/4 — Ensure Swarm is initialized
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} \
            "set -euo pipefail; if [ \"\$(docker info -f '{{.Swarm.LocalNodeState}}')\" = inactive ]; then docker swarm init; fi"

      - name: SSH 2/4 — Set vm.max_map_count (indexer prerequisite)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} \
            "set -euo pipefail; echo "vm.max_map_count=262144" | sudo tee /etc/sysctl.d/99-opensearch.conf >/dev/null
             sudo sysctl -w vm.max_map_count=262144"

      - name: SSH 3/4 — Generate cluster certs (run from multi-node/)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} \
            "set -euo pipefail; cd '${{ env.REMOTE_BASE }}/multi-node'; \
             if docker compose version >/dev/null 2>&1; then C='docker compose'; else C='docker-compose'; fi; \
             \$C -f generate-indexer-certs.yml run --rm generator"

      - name: SSH 4/4 — Deploy/Update stack using your stack-wazuh.yml (from multi-node/)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} \
            "set -euo pipefail; cd '${{ env.REMOTE_BASE }}/multi-node'; docker stack deploy -c stack-wazuh.yml wazuh && docker stack services wazuh"

  test:
    needs: deploy
    runs-on: codebuild-wazuh-runner-${{ github.run_id }}-${{ github.run_attempt }}

    env:
      DASHBOARD_URL: "https://3.92.21.45"
      API_URL: "https://3.92.21.45:55000"
      TEST_USER: ${{ secrets.WAZUH_TEST_USER }}
      TEST_PASS: ${{ secrets.WAZUH_TEST_PASS }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Install Python deps (selenium + requests)
      # - name: Install Python 3.11
      #   run: |
      #     sudo dnf install -y python3.11
      #     python3.11 --version

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install selenium requests pytest

      # Install Chrome + driver
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      - name: Install ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Selenium + API tests
        run: pytest selenium-tests/