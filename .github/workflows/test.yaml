# .github/workflows/wazuh-remote-swarm.yml
name: Wazuh Swarm (remote SSH)

on:
  push:
    branches: [ main ]
    paths:
      - "stack/**"
      - ".github/workflows/**"
  workflow_dispatch:
    inputs:
      wazuh_tag:
        description: "wazuh/wazuh-docker tag (e.g., v4.12.0)"
        default: "v4.12.0"
        required: false
      stack_file:
        description: "Optional overrides file in this repo"
        default: "stack/wazuh-swarm.yml"
        required: false

env:
  WAZUH_TAG: ${{ inputs.wazuh_tag || 'v4.12.0' }}
  STACK_FILE: ${{ inputs.stack_file || 'stack/wazuh-stack.yaml' }}
  REMOTE_BASE: /opt/wazuh
  # --- adapt these to secrets/vars in your repo ---
  SWARM_HOST: ${{ vars.SWARM_HOST || '56.228.11.176' }}   # move to repo var/secret
  SWARM_USER: ${{ vars.SWARM_USER || 'ec2-user' }}

jobs:
  deploy:
    # If you really want your custom CodeBuild runner label, uncomment next line
    runs-on: codebuild-wazuh-runner-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Hello World
        run: echo "Hello World"

      - name: Write private key
        shell: bash
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf '%s\n' "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Trust server host key (pin it)
        shell: bash
        run: |
          mkdir -p ~/.ssh
          # Prefer storing an exact key in a secret KNOWN_HOSTS. If absent, fall back to ssh-keyscan.
          if [ -n "${{ secrets.KNOWN_HOSTS }}" ]; then
            printf '%s\n' "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          else
            ssh-keyscan -H "${{ env.SWARM_HOST }}" >> ~/.ssh/known_hosts
          fi
          chmod 600 ~/.ssh/known_hosts

      - name: Verify SSH
        shell: bash
        run: |
          set -euo pipefail
          OUT="$(ssh -i ~/.ssh/id_rsa -o BatchMode=yes -o UserKnownHostsFile=~/.ssh/known_hosts -T ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} 'echo SSH_OK && whoami && hostname')"
          echo "$OUT"
          echo "$OUT" | grep -qx 'SSH_OK'

      - name: Fetch official Wazuh multi-node configs at tag
        shell: bash
        run: |
          set -euo pipefail
          rm -rf /tmp/wazuh-docker
          git clone --depth 1 --branch "${{ env.WAZUH_TAG }}" https://github.com/wazuh/wazuh-docker /tmp/wazuh-docker
          tar czf /tmp/wazuh-multi-node.tgz -C /tmp/wazuh-docker multi-node

      - name: (Optional) Check for local overrides file
        id: have_overrides
        shell: bash
        run: |
          if [ -f "${{ env.STACK_FILE }}" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifacts to remote
        shell: bash
        run: |
          set -euo pipefail
          scp -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            /tmp/wazuh-multi-node.tgz \
            ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }}:${{ env.REMOTE_BASE }}/
          if [ "${{ steps.have_overrides.outputs.present }}" = "true" ]; then
            scp -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
              "${{ env.STACK_FILE }}" \
              ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }}:${{ env.REMOTE_BASE }}/wazuh-swarm.overrides.yml
          fi

# 1) PREP: create remote dir and unpack official multi-node configs
      - name: Remote — prepare dir & unpack configs
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} '
            set -euo pipefail
            REMOTE_BASE="${{ env.REMOTE_BASE }}"
            mkdir -p "$REMOTE_BASE"
            cd "$REMOTE_BASE"
            rm -rf "$REMOTE_BASE/multi-node" || true
            tar xzf "$REMOTE_BASE/wazuh-multi-node.tgz"
          '

      # 2) SWARM: init if inactive (idempotent)
      - name: Remote — init Docker Swarm if needed
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} '
            set -euo pipefail
            if [ "$(docker info -f "{{.Swarm.LocalNodeState}}")" = "inactive" ]; then
              docker swarm init
            fi
          '

      # 3) HOST SETTINGS: satisfy OpenSearch requirement
      - name: Remote — set vm.max_map_count=262144
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} '
            set -euo pipefail
            sudo echo "vm.max_map_count=262144" > /etc/sysctl.d/99-opensearch.conf
            sudo sysctl -w vm.max_map_count=262144
          '

      # 4) CERTS: run the official generator BEFORE any deploy
      - name: Remote — generate Wazuh cluster certs
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} '
            set -euo pipefail
            REMOTE_BASE="${{ env.REMOTE_BASE }}"
            cd "$REMOTE_BASE/multi-node"
            if docker compose version >/dev/null 2>&1; then COMPOSE="docker compose"; else COMPOSE="docker-compose"; fi
            $COMPOSE -f generate-indexer-certs.yml run --rm generator
          '

      # 5) MERGE: upstream compose + optional overrides -> single file
      - name: Remote — pre-merge compose files
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} '
            set -euo pipefail
            REMOTE_BASE="${{ env.REMOTE_BASE }}"
            cd "$REMOTE_BASE/multi-node"
            if docker compose version >/dev/null 2>&1; then COMPOSE="docker compose"; else COMPOSE="docker-compose"; fi
            OV="-f docker-compose.yml"
            if [ -f "$REMOTE_BASE/wazuh-swarm.overrides.yml" ]; then
              OV="$OV -f $REMOTE_BASE/wazuh-swarm.overrides.yml"
            fi
            $COMPOSE $OV config > "$REMOTE_BASE/stack.merged.yml"
          '

      # 6) DEPLOY: Swarm stack (idempotent updates)
      - name: Remote — deploy/update stack
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} '
            set -euo pipefail
            REMOTE_BASE="${{ env.REMOTE_BASE }}"
            docker stack deploy -c "$REMOTE_BASE/stack.merged.yml" wazuh
          '

      # 7) POST: show service state
      - name: Remote — show service state
        shell: bash
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o UserKnownHostsFile=~/.ssh/known_hosts ${{ env.SWARM_USER }}@${{ env.SWARM_HOST }} '
            set -euo pipefail
            docker stack services wazuh || true
            docker service ls --format "table {{.Name}}\t{{.Mode}}\t{{.Replicas}}\t{{.Image}}" || true
          '
